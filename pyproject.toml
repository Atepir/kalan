[tool.poetry]
name = "mcp-research-collective"
version = "0.1.0"
description = "A developmental multi-agent research system using the Model Context Protocol"
authors = ["Research Collective Team"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10.11"
langgraph = "^0.2.0"
mcp = "^1.0.0"
neo4j = "^5.24.0"
asyncpg = "^0.29.0"
sqlalchemy = "^2.0.32"
pydantic = "^2.9.0"
pydantic-settings = "^2.5.0"
fastapi = "^0.114.0"
uvicorn = "^0.30.0"
arxiv = "^2.1.0"
scholarly = "^1.7.11"
pandas = "^2.2.0"
numpy = "^2.0.0"
httpx = "^0.27.0"
tenacity = "^9.0.0"
structlog = "^24.4.0"
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
alembic = "^1.13.0"
psycopg2-binary = "^2.9.10"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
ruff = "^0.6.0"
mypy = "^1.11.0"
black = "^24.8.0"
ipython = "^8.27.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP", "ANN", "B", "A", "C4", "DTZ", "T10", "ISC", "ICN", "PIE", "PT", "RET", "SIM", "ARG", "PTH", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["ANN101", "ANN102", "ANN401"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "arxiv.*",
    "scholarly.*",
    "neo4j.*",
    "langgraph.*",
    "mcp.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
